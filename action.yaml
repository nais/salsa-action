name: 'Nais Salsa Action'
description: 'Generate, sign and upload SBOM'
inputs:
  ecosystem:
    description: |-
      description of the ecosystem to use, accepted values are go, gradle and maven.
      several of ecosystems have different type of build systems, specify key=value,
      for node e.g. node=npm and for python e.g. python=poetry etc.
      maven and Gradle only supports wrappers. 
      ff the application is depending on private repositories, please see 'bring your own sbom' alias 'byosbom'
    required: true
  image:
    description: |-
      image to sign and upload attestation, must be in the form of <image>:<tag>@<digest>
    required: true
  maindir:
    description: |-
      go main directory for sbom generation
    required: false
    default: '.'
  context:
    description: |-
      current working directory for sbom generation, defaults to root of the repository
      useful in mono-repos or when the build file is not in the root of the repository
    required: false
    default: '.'
  key:
    description: |-
      path to the private key file or KMS URI
    required: false
    default: 'cosign.key'
  password:
    description: |-
      password for the private key file
    required: false
    default: ''
  byosbom:
    description: |-
      bring your own SBOM, use existing SBOM file instead of generating one, must be a json file and 
      default format is CycloneDX, see: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md for more info
      If the file is not in the root of the repository, please see 'context'
    required: false
  sbom:
    description: |-
      filename of the SBOM file, defaults to sbom.json
    required: false
    default: 'bom.json'
  type:
    description: |-
      type of the SBOM file, defaults to cyclonedx
    required: false
    default: 'cyclonedx'
  identity-token:
    description: |-
      identity token to use for certificate from fulcio, preffered format is path to a file containing the token.
      useful for pre-generated tokens when using a workload identity provider.
    required: false
    default: ''
  container-sbom:
    description: |-
      add a container sbom to the attestation
    required: false
    default: ''

runs:
  using: composite
  steps:

    - name: Export sbom filename
      run: echo SBOM=${{ inputs.sbom }} >> $GITHUB_ENV
      shell: bash

    - name: Set current context
      run: |
        echo CONTEXT=${{ inputs.context }} >> $GITHUB_ENV
      shell: bash

    - name: Check Image format
      run: |
        if [[ ${{ inputs.image }} != *:*@* ]]; then
          echo "Image must be in the form of <image>:<tag>@<digest>"
          exit 1
        fi
        echo IMAGE=${{ inputs.image }} >> $GITHUB_ENV
      shell: bash

    - name: Install Go
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'go' }}
      uses: actions/setup-go@v3
      with:
        go-version: '1.20.1'

    - name: Install cyclonedx-gomod
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'go' }}
      shell: bash
      run: |
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        echo "Installed cyclonedx-gomod"

    - name: Go CycloneDX sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'go' }}
      shell: bash
      run: |
        cd $CONTEXT
        cyclonedx-gomod app -output ./${{ env.SBOM }} -main ${{ inputs.maindir }} -json=true
        echo "Generated Go ${{ env.SBOM }}"

    - name: Maven CycloneDX sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'maven' }}
      shell: bash
      run: |
        cd $CONTEXT
        if [[ ! -f mvnw ]]; then
          echo "maven wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./mvnw org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom -DoutputFormat=json -DoutputName=bom && \
        echo "SBOM=target/${{ env.SBOM }}" >> $GITHUB_ENV && echo "Generated Maven ${{ env.SBOM }}" \
        || echo "cyclonedx-maven-plugin not found, please add it to the repository"


    - name: Gradle cycloneDX sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'gradle' }}
      shell: bash
      run: |
        cd $CONTEXT      
        if [[ ! -f gradlew ]]; then
          echo "gradle wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./gradlew cyclonedxBom && \
        echo "SBOM=build/reports/${{ env.SBOM }}" >> $GITHUB_ENV && echo "Generated Gradle ${{ env.SBOM }}" \
        || echo "cyclonedx-gradle-plugin not found, please add it to the repository"

    - name: Npm CycloneDX sbom
      if: ${{ inputs.byosbom == '' && contains(inputs.ecosystem, 'node') }}
      shell: bash
      run: |
        ecosystem="${{ inputs.ecosystem }}"
        build_type="${ecosystem##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'npm' ]]; then
          echo "a project build type is required for node ecosystem"
          echo "accepted values are npm"
          echo "yarn is not supported at the moment"
          exit 1
        fi
        cd $CONTEXT
        npx @cyclonedx/cyclonedx-npm --output-file ${{ env.SBOM }}
        echo "Generated ${{ inputs.ecosystem }} ${{ env.SBOM }}"

    - name: Python CycloneDX sbom
      if: ${{ inputs.byosbom == '' && contains(inputs.ecosystem, 'python') }}
      shell: bash
      run: |
        # greedy front trim matches everything up to and including the last colon
        ecosystem="${{ inputs.ecosystem }}"
        build_type="${ecosystem##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'poetry' && "$build_type" != 'pip' && "$build_type" != 'conda-json' && "$build_type" != 'requirements' ]]; then
          echo "a project build type is required for python ecosystem"
          echo "accepted values are pip, poetry, conda-json and requirements"
          exit 1
        fi
        cd $CONTEXT
        pip install cyclonedx-bom
        cyclonedx-py --"$build_type" -o ${{ env.SBOM }} --format json
        echo "Generated ${{ inputs.ecosystem }} ${{ env.SBOM }}"

    - name: Attest with byosbom
      if: ${{ inputs.byosbom != '' }}
      run: |
        if [ ! -f ${{ inputs.context }}/inputs.byosbom }} ]; then
          echo "File ${{ inputs.byosbom }} not found!"
          exit 1
        fi
        if [[ ${{ inputs.byosbom }} != *.json ]]; then
          echo "File ${{ inputs.byosbom }} is not a json file!"
          exit 1
        fi
        echo "SBOM=${{ inputs.byosbom }}" >> $GITHUB_ENV
        echo "Using BYOSBOM ${{ env.SBOM }}"
      shell: bash

    - name: Install Cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v2.0.0'
    
    #- name: Install Cosign
    #  run: |
    #    curl https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-arm -Lo /usr/local/bin/cosign
    #    chmod +x /usr/local/bin/cosign
    #    echo "Installed cosign"
    #  shell: bash

    - name: Cosign attest and upload to OCI registry
      run: |
        echo "Using SBOM ${{ env.SBOM }}"
        echo "Signing SBOM for ${{ env.IMAGE }}"
        if [[ inputs.key != '' ]]; then
          cosign attest --tlog-upload=false --predicate ${{ env.CONTEXT }}/${{ env.SBOM }} --type ${{ inputs.type }} --key ${{ inputs.key }} ${{ env.IMAGE }}
        else
          # TODO --identity-token flag used for pre-generated tokens (etc. GKE workload identity, EXPERIMENTAL)
          # TODO --oidc-client-id, --oidc-client-secret, --oidc-issuer (flags used for GITHUB_TOKEN, EXPERIMENTAL)
           echo "keyless signing dry-run"
          # cosign attest --predicate ${{ env.CONTEXT }}/${{ env.SBOM }} --type cyclonedx ${{ env.IMAGE }}
        fi
        echo "Attestation finished"
      shell: bash
      env:
        COSIGN_PASSWORD: ${{ inputs.password }}