name: 'Hello World'
description: 'Greet someone'
inputs:
  ecosystem:
    description: |-
      description of the ecosystem to use, accepted values are go, gradle, maven and npm.
      maven and gradle only supports wrappers. If the application requires private repositories,
      please see: bring your own sbom alias 'byosbom'
    required: true
  image:
    description: |-
      image to sign and upload attestation, must be in the form of <image>:<tag>@<digest>
    required: true
  maindir:
    description: |-
      maindir go relative to workdir
    required: true
    default: '.'
  workdir:
    description: |-
      workdir for sbom generation
    required: false
  key:
    description: |-
      path to key or KMS url, used for signing and uploading attestation
    required: true
  byosbom:
    description: |-
      Bring your own Sbom, use existing SBOM file instead of generating one, must be a json file and 
      accepted formats are CycloneDX. If the file is not in the root of the repository, please see: workdir
    required: false
runs:
  using: composite
  steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20.1'

    #    - name: Install Cosign
    #      uses: sigstore/cosign-installer@main
    #      with:
    #        cosign-release: 'v2.0.0'

    - name: Change directory to workdir
      run: |
        echo WORKDIR=${{ inputs.workdir }} >> $GITHUB_ENV
        cd ${{ inputs.workdir }}
      shell: bash

    # TODO: install and verify checksum etc
    - name: Install cyclonedx-gomod
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'go' }}
      shell: bash
      run: |
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        echo "Installed cyclonedx-gomod"
    - name: CycloneDX GoMod Generate SBOM
      if: ${{ inputs.ecosystem == 'go' }}
      shell: bash
      run: |
        cd $WORKDIR
        cyclonedx-gomod app -output ./sbom.json -main ${{ inputs.maindir }} -json=true
        echo "SBOM=sbom.json" >> $GITHUB_ENV
    #    - name: CycloneDX GoMod Generate SBOM
    #      if: ${{ inputs.ecosystem == 'go' }}
    #      uses: CycloneDX/gh-gomod-generate-sbom@v1.1.0
    #      working-directory: golang
    #      with:
    #        args: app -output ./sbom.json -main ${{ inputs.maindir }} -json=true

    - name: Generate cyclonedx-maven sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'maven' }}
      shell: bash
      run: |
        cd $WORKDIR
        ./mvnw org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
        echo "SBOM=target/bom.json" >> $GITHUB_ENV

    - name: Generate cyclonedx-gradle sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'gradle' }}
      shell: bash
      run: |
        cd $WORKDIR
        ./gradlew cyclonedxBom
        echo "SBOM=build/reports/bom.json" >> $GITHUB_ENV

    - name: Generate cyclonedx-npm sbom
      if: ${{ inputs.byosbom == '' && inputs.ecosystem == 'npm' }}
      shell: bash
      run: |
        cd $WORKDIR
        npx @cyclonedx/cyclonedx-npm --output-file sbom.json
        echo "SBOM=sbom.json" >> $GITHUB_ENV

    - name: Attest BYOSBOM
      if: ${{ inputs.byosbom != '' }}
      run: |
        if [ ! -f ${{ inputs.workdir }}/inputs.byosbom }} ]; then
          echo "File ${{ inputs.byosbom }} not found!"
          exit 1
        fi
        if [[ ${{ inputs.byosbom }} != *.json ]]; then
          echo "File ${{ inputs.byosbom }} is not a json file!"
          exit 1
        fi
        echo "SBOM=${{ inputs.byosbom }}" >> $GITHUB_ENV
      shell: bash

    - name: Install Cosign
      run: |
        curl https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-arm -Lo /usr/local/bin/cosign
        chmod +x /usr/local/bin/cosign 
        echo "Installed cosign"
      shell: bash

    - name: Cosign attest and upload to OCI registry
      run: |
        echo "Using SBOM ${{ env.SBOM }}"
        echo "Signing SBOM for ${{ inputs.image }}"
        export COSIGN_PASSWORD=""
        cosign attest --tlog-upload=false --predicate ${{ inputs.workdir }}/${{ env.SBOM }} --type cyclonedx --key ${{ inputs.workdir }}/${{ inputs.key }} ${{ inputs.image }}
        echo "Attestation finished"
      shell: bash