name: 'Nais Salsa Action'
description: 'Generate, sign and upload SBOM'
inputs:
  ecosystem:
    description: |-
      (Optional) action finds the actual build file in the repository but you can also specify a ecosystem to generate 
      sbom from. Several of ecosystems have different type of build systems, then specify key=value,
      for node e.g. node=npm and for python e.g. python=poetry etc. maven and gradle only supports wrappers. 
      If the application is depending on private repositories, please see 'bring your own sbom' alias 'byosbom'
    required: false
  image:
    description: |-
      image to sign and upload attestation, must be in the form of <image>:<tag>@<digest>
    required: true
  maindir:
    description: |-
      go main directory for sbom generation
    required: false
    default: '.'
  context:
    description: |-
      current working directory for sbom generation, defaults to root of the repository
      useful in mono-repos or when the build file is not in the root of the repository
    required: false
    default: '.'
  key:
    description: |-
      path to the private key file or KMS URI
    required: false
    default: ''
  password:
    description: |-
      password for the private key file
    required: false
    default: ''
  byosbom:
    description: |-
      bring your own SBOM, use existing SBOM file instead of auto generating, must be a json file and 
      default format is CycloneDX, see: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md for more info.
      If the file is not in the root of the repository, please see 'context'
    required: false
  sbom:
    description: |-
      filename of the SBOM file, defaults to bom.json
    required: false
    default: 'bom.json'
  type:
    description: |-
      type of the SBOM file, defaults to cyclonedx
    required: false
    default: 'cyclonedx'
  workload-identity-provider:
    description: |-
      The workload identity provider for google service account impersonation
    required: false
  google-service-account:
    description: |-
      Name of google service account to impersonate
    required: false
    default: ''
  kms-credentials:
    description: |-
      The credentials for the KMS key
    required: false

outputs:
  sbom:
    description: 'generated sbom path'
    value: ${{ steps.outputs.outputs.sbom }}
  

runs:
  using: composite
  steps:

    - name: Export sbom filename
      run: echo SBOM=${{ inputs.sbom }} >> $GITHUB_ENV
      shell: bash

    - name: Set current context
      run: |
        echo CONTEXT=${{ inputs.context }} >> $GITHUB_ENV
      shell: bash

    - name: Set eccosystem
      if: ${{ inputs.ecosystem != '' }}
      run: |
        echo ECOSYSTEM=${{ inputs.ecosystem }} >> $GITHUB_ENV
      shell: bash

    - name: Identify ecosystem
      if: ${{ inputs.ecosystem == '' }}
      run: |
        if [[ "$(find ${{ env.CONTEXT }} -type f -name 'package-lock.json')" ]]; then
         echo ECOSYSTEM="node=npm" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'build.gradle*')" ]]; then
         echo ECOSYSTEM=gradle >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'pom.xml')" ]]; then
         echo ECOSYSTEM=maven >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'go.mod')" ]]; then
         echo ECOSYSTEM=go >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'poetry.lock')" ]]; then
         echo ECOSYSTEM="python=poetry" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'Pipfile.lock')" ]]; then
         echo ECOSYSTEM="python=pip" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'requirements.txt')" ]]; then
          echo ECOSYSTEM="python=pip" >> $GITHUB_ENV
        else
         echo "No supported build file found in the repository"
         echo "Action will try to generate sbom from the image with trivy"
        fi
      shell: bash

    - name: Check Image format
      run: |
        if [[ ${{ inputs.image }} != *@sha256:* ]]; then
          echo "Image must be in the form of <image>@<digest>"
          exit 1
        fi
        echo IMAGE=${{ inputs.image }} >> $GITHUB_ENV
      shell: bash

    - name: Use trivy to generate sbom
      if: ${{ inputs.byosbom == '' && env.ECOSYSTEM == '' }}
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "image"
        format: "cyclonedx"
        output: "${{ env.CONTEXT }}/${{ inputs.sbom }}"
        image-ref: "${{ env.IMAGE }}"

    - name: Export trivy sbom
      if: ${{ inputs.byosbom == '' && env.ECOSYSTEM == '' }}
      run: echo SBOM=${{ inputs.sbom }} >> $GITHUB_ENV
      shell: bash

    - name: Install Go
      if: ${{ env.ECOSYSTEM == 'go' }}
      uses: actions/setup-go@v3
      with:
        go-version: '1.20.1'

    - name: Install cyclonedx-gomod and generate sbom
      if: ${{ inputs.byosbom == '' && env.ECOSYSTEM == 'go' }}
      shell: bash
      run: |
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        echo "Installed cyclonedx-gomod"
        cd $CONTEXT
        cyclonedx-gomod app -output ./${{ env.SBOM }} -main ${{ inputs.maindir }} -json=true
        echo "Generated Go ${{ env.SBOM }}"

    - name: Maven CycloneDX sbom
      if: ${{ inputs.byosbom == '' && env.ECOSYSTEM == 'maven' }}
      shell: bash
      run: |
        cd $CONTEXT
        if [[ ! -f mvnw ]]; then
          echo "maven wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./mvnw org.cyclonedx:cyclonedx-maven-plugin:2.7.5:makeAggregateBom -DoutputFormat=json -DoutputName=bom && \
        echo "SBOM=target/${{ env.SBOM }}" >> $GITHUB_ENV && echo "Generated Maven ${{ env.SBOM }}"


    - name: Gradle cycloneDX sbom
      if: ${{ inputs.byosbom == '' && env.ECOSYSTEM == 'gradle' }}
      shell: bash
      run: |
        cd $CONTEXT      
        if [[ ! -f gradlew ]]; then
          echo "gradle wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./gradlew cyclonedxBom && \
        echo "SBOM=build/reports/${{ env.SBOM }}" >> $GITHUB_ENV && echo "Generated Gradle ${{ env.SBOM }}"

    - name: Npm CycloneDX sbom
      if: ${{ inputs.byosbom == '' && contains(env.ECOSYSTEM, 'node') }}
      shell: bash
      run: |
        eco="${{ env.ECOSYSTEM }}"
        build_type="${eco##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'npm' ]]; then
          echo "a project build type is required for node ecosystem"
          echo "accepted values are npm"
          echo "yarn is not supported at the moment"
          exit 1
        fi
        cd $CONTEXT
        npx @cyclonedx/cyclonedx-npm --output-file ${{ env.SBOM }}
        echo "Generated ${{ env.ECOSYSTEM }} ${{ env.SBOM }}"

    - name: Python CycloneDX sbom
      if: ${{ inputs.byosbom == '' && contains(env.ECOSYSTEM, 'python') }}
      shell: bash
      run: |
        # greedy front trim matches everything up to and including the last colon
        eco="${{ env.ECOSYSTEM }}"
        build_type="${eco##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'poetry' && "$build_type" != 'pip' && "$build_type" != 'conda-json' && "$build_type" != 'requirements' ]]; then
          echo "a project build type is required for python ecosystem"
          echo "accepted values are pip, poetry, conda-json and requirements"
          exit 1
        fi
        cd $CONTEXT
        pip install cyclonedx-bom
        cyclonedx-py --"$build_type" -o ${{ env.SBOM }} --format json
        echo "Generated ${{ env.ECOSYSTEM }} ${{ env.SBOM }}"

    - name: Attest with byosbom
      if: ${{ inputs.byosbom != '' }}
      run: |
        if [ ! -f ${{ inputs.context }}/inputs.byosbom }} ]; then
          echo "File ${{ inputs.byosbom }} not found!"
          exit 1
        fi
        if [[ ${{ inputs.byosbom }} != *.json ]]; then
          echo "File ${{ inputs.byosbom }} is not a json file!"
          exit 1
        fi
        echo "SBOM=${{ inputs.byosbom }}" >> $GITHUB_ENV
        echo "Using BYOSBOM ${{ env.SBOM }}"
      shell: bash
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v2.0.0'
    
    #- name: Install Cosign
    #  run: |
    #    curl https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-amd64 -Lo /usr/local/bin/cosign
    #    chmod +x /usr/local/bin/cosign
    #    echo "Installed cosign"
    #  shell: bash

    - name: Authenticate to Google Cloud with workload identity
      if: ${{ inputs.key == '' && inputs.google-service-account != '' && inputs.workload-identity-provider != ''}}
      uses: google-github-actions/auth@v1.0.0
      with:
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
        service_account: ${{ inputs.google-service-account }}
        token_format: "id_token"
        id_token_audience: sigstore
        id_token_include_email: true

    - name: Authenticate to Google Cloud with credentials
      if: ${{ inputs.key != '' && inputs.kms-credentials != '' }}
      uses: google-github-actions/auth@v1.0.0
      with:
        credentials_json: ${{ inputs.kms-credentials }}

    - name: Determine cosign google oidc provider
      if: ${{ inputs.key == '' && inputs.google-service-account != ''}}
      run: echo "OIDC_PROVIDER=google-impersonate" >> $GITHUB_ENV
      shell: bash

    - name: Determine cosign github oidc provider
      if: ${{ inputs.key == '' && inputs.google-service-account == ''}}
      run: echo "OIDC_PROVIDER=github-actions" >> $GITHUB_ENV
      shell: bash

    - name: Cosign keyless Google attest and upload to OCI registry
      if: ${{ inputs.key == '' && env.OIDC_PROVIDER == 'google-impersonate' }}
      run: |
        cosign attest --yes --oidc-provider ${{ env.OIDC_PROVIDER }} --predicate ${{ env.SBOM_PATH }} --type ${{ env.PREDICATE_TYPE }} ${{ env.IMAGE }}
        echo "keyless ${{ env.OIDC_PROVIDER }} attestation finished"
      shell: bash
      env:
        GOOGLE_SERVICE_ACCOUNT_NAME: ${{ inputs.google-service-account }}
        SBOM_PATH: ${{ env.CONTEXT }}/${{ env.SBOM }}
        PREDICATE_TYPE: ${{ inputs.type }}

    - name: Cosign keyless Github attest and upload to OCI registry
      if: ${{ inputs.key == '' && env.OIDC_PROVIDER == 'github-actions' }}
      run: |
        cosign attest --yes --predicate ${{ env.CONTEXT }}/${{ env.SBOM }} --type ${{ env.PREDICATE_TYPE }} ${{ env.IMAGE }}
        echo "keyless ${{ env.OIDC_PROVIDER }} attestation finished"
      shell: bash
      env:
        PREDICATE_TYPE: ${{ inputs.type }}

    - name: Cosign attest and upload to OCI registry
      if: ${{ inputs.key != '' }}
      run: |
        echo "Using SBOM ${{ env.SBOM }}"
        echo "Signing SBOM for ${{ env.IMAGE }}"
        cosign attest --tlog-upload=false --predicate ${{ env.CONTEXT }}/${{ env.SBOM }} --type ${{ env.PREDICATE_TYPE }} --key ${{ inputs.key }} ${{ env.IMAGE }}
        echo "Attestation finished"
      shell: bash
      env:
        COSIGN_PASSWORD: ${{ inputs.password }}
        PREDICATE_TYPE: ${{ inputs.type }}

    - name: Set outputs
      id: outputs
      shell: bash
      run: |
        echo "sbom=${{ env.CONTEXT }}/${{ env.SBOM }}" >> $GITHUB_OUTPUT